

# This script is intended to be sourced by entrypoint.sh.  It contains
# all the Elastic-Compute-Cloud specific definitions and behaviors.
# Anything written to stdout will end up in a notification e-mail.

# This is just creating a temporary file and setting a env. var.  It should
# not produce any output (which may needlessly trigger an e-mail).
aws_init

# Override this for debugging
AWS="${AWS:-aws}"

OUTPUT=$(mktemp -p '' orphanvms_awsec2_XXXXX)

# It's simpler to compare unix times
UNIX_THRESHOLD=$(date --date "$THRESHOLD" +%s)
# EC2 instances can be in several transititory "meta" states, including
# "terminated" (deleted).  This script only cares about "running" instances.
EC2_FILTER="Name=instance-state-name,Values=running"
# aws cli returns a giant blob of JSON with all kinds of details we don't care about.
# Help cut down the amount of crap we need to stort through.
EC2_QUERY="Reservations[*].Instances[*].{ID:InstanceId,TAGS:Tags,START:LaunchTime}"

echo "Orphaned AWS EC2 VMs:" > $OUTPUT

# Returns an empty list when nothing is found, otherwise returns items indicated
# in $EC2_QUERY, each inside a (useless) single-item list, inside another list.
if ! aws_output=$(aws ec2 describe-instances --no-paginate --output json --filter "$EC2_FILTER" --query "$EC2_QUERY"); then
    die 1 "Querying running EC2 instances: $aws_output"
fi

# Unroll the (useless) inner lists, if outer list is empty no instances were found.
if ! simple_inst_list=$(jq -e '[.[][]]'<<<"$aws_output"); then
    # Debug the original output in case it's more helpful
    dbg "No EC2 instances found: $aws_output"
    exit 0
fi

# I don't expect there will ever be more than maybe 0-20 instances at any time.
for instance_index in $(seq 1 $(jq -e 'length'<<<"$simple_inst_list")); do
    instance=$(jq -e ".[$instance_index - 1]"<<<"$simple_inst_list")
    # A Name-tag isn't guaranteed, default to stupid, unreadable, generated ID
    name=$(jq -r ".ID"<<<"$instance")
    if name_tag=$(get_tag_value "Name" "$instance"); then
        # This is MUCH more human-friendly and easier to find in the WebUI.
        # If it was an instance leaked by Cirrus-CI, it may even include the
        # task number which leaked it.
        name=$name_tag
    fi

    # The `START` (a.k.a. `LaunchTime`) value is documented as ISO 8601 format,
    # forced to the UTC zone with a (useless) microseconds appended.  I found
    # `jq` cannot parse the microseconds part properly, but `date` seems happy
    # to accept it.
    if ! started_at=$(date --utc --date $(jq -r -e ".START"<<<"$instance") +%s); then
        die "Error extracting start time from instance JSON: '$instance'"
    fi
    age_days=$((($NOW - $started_at) / (60 * 60 * 24)))
    if [[ $started_at -gt $UNIX_THRESHOLD ]]; then
        dbg "Ignoring instance '$name' (too new)"
        continue
    fi

    dbg "Examining EC2 instance '$name', '$age_days' days old"

    if [[ $(get_tag_value "persistent" "$instance" || true) == "true" ]]; then
        dbg "Found instance '$name' marked persistent=true, ignoring it."
        continue
    fi

    line="* VM $name running $age_days days"

    # It would be nice to list all the tags like we do for GCE VMs,
    # but it's a PITA to do for AWS in a human-readable format.
    # Only print this handy-one (set by get_ci_vm) if it's there.
    if inuseby_tag=$(get_tag_value "in-use-by" "$instance"); then
        dbg "Found instance '$name' tagged in-use-by=$inuseby_tag."
        line+=" tagged in-use-by=$inuseby_tag"
    fi

    echo "$line" >> "$OUTPUT"
done

dbg "The following will be part of a notification e-mail:"

# Don't count the "Orphaned AWS EC2 VMs:" header-line
if [[ $(wc -l $OUTPUT | awk '{print $1}') -gt 1 ]]; then
    cat $OUTPUT
fi
