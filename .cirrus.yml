---

# Main collection of env. vars to set for all tasks and scripts.
env:
    # Name of the ultimate destination branch for this CI run, PR or post-merge.
    DEST_BRANCH: "master"
    # Shell used to execute all script commands
    CIRRUS_SHELL: "/bin/bash"
    # No need to go crazy, but grab enough to cover most PRs
    CIRRUS_CLONE_DEPTH: 50
    IMG_SFX: "${CIRRUS_BUILD_ID}"  # Same for all tasks of _this_ build
    # Imgae create/import credentials (N/B: must NOT == gcp_credentials)
    GAC_JSON: ENCRYPTED[7fba7fb26ab568ae39f799ab58a476123206576b0135b3d1019117c6d682391370c801e149f29324ff4b50133012aed9]


gcp_credentials: ENCRYPTED[823fdbc2fee3c27fa054ba1e9cfca084829b5e71572f1703a28e0746b1a924ee5860193f931adce197d40bf89e7027fe]

timeout_in: 60m

task:
    name: "Validate"
    alias: "validate"
    timeout_in: 5m
    container: &ci_container
        # Ref: https://cirrus-ci.org/guide/docker-builder-vm/#dockerfile-as-a-ci-environment
        dockerfile: "ci/Containerfile"
        cpu: 1
        memory: "1G"
    script:
        - "ci/shellcheck.sh"
        - "make image_builder/gce.json"
        - "make base_images/gce.json"


task:
    name: "Image-builder image"
    alias: "image_builder"
    depends_on:
        - validate
    # Packer needs time to clean up partially created VM images
    auto_cancellation: $CI != "true"
    timeout_in: 30m
    container:
      dockerfile: "image_builder/Containerfile"
      cpu: 2
      memory: "2G"
    script: "ci/make_image_builder.sh"
    manifest_artifacts:
        path: image_builder/manifest.json
        type: application/json


task:
    alias: "base_images"
    depends_on:
        - image_builder
    # Packer needs time to clean up partially created VM images
    auto_cancellation: $CI != "true"
    timeout_in: 30m
    # Cannot use a container for this task, virt required for fedora image conversion
    gce_instance:
        image_project: "libpod-218412"
        image_family: "image-builder"  # Latest image produced by image_builder task
        zone: "us-central1-a"
        # Nested-virt is required, need Intel Haswell or better CPU
        enable_nested_virtualization: true
        type: "n2-standard-2"
        disk: 200  # Must be 200, negatively affects performance otherwise.
        # VM Image import process involves google-storage buckets, and google-compute
        # full access.  Note: Actual authZ specified by service-account roles.
        # Ref: https://cloud.google.com/compute/docs/access/service-accounts?&_ga=2.102552833.-1670000616.1540407237#accesscopesiam
        scopes: ["cloud-platform"]
    matrix:
        - &base_image
          name: "${PACKER_BUILDS} Base Image"
          env:
            PACKER_BUILDS: "fedora"
        - <<: *base_image
          env:
            PACKER_BUILDS: "prior-fedora"
        - <<: *base_image
          env:
            PACKER_BUILDS: "ubuntu"
        - <<: *base_image
          env:
            PACKER_BUILDS: "prior-ubuntu"
    script: "ci/make_base_images.sh"
    manifest_artifacts:
        path: base_images/manifest.json
        type: application/json

task:
    alias: "cache_images"
    depends_on:
        - base_images
    # Packer needs time to clean up partially created VM images
    auto_cancellation: $CI != "true"
    timeout_in: 40m
    container:
      dockerfile: "image_builder/Containerfile"
      cpu: 2
      memory: "2G"
    script: "ci/make_cache_images.sh"
    matrix:
        - &cache_image
          name: "${PACKER_BUILDS} Cache Image"
          env:
            PACKER_BUILDS: "fedora"
        - <<: *cache_image
          env:
            PACKER_BUILDS: "prior-fedora"
        - <<: *cache_image
          env:
            PACKER_BUILDS: "ubuntu"
        - <<: *cache_image
          env:
            PACKER_BUILDS: "prior-ubuntu"
    manifest_artifacts:
        path: cache_images/manifest.json
        type: application/json

task:
    name: &success_name success
    alias: *success_name
    depends_on:
        - validate
        - image_builder
        - base_images
        - cache_images
    container:
        <<: *ci_container
    clone_script: mkdir -p "${CIRRUS_WORKING_DIR}"  # source is not needed
    script: /bin/true
